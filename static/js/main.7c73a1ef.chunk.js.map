{"version":3,"sources":["TodoItem.js","todosData.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","props","className","type","checked","item","completed","onChange","handleChange","id","style","ontStyle","color","textDecoration","text","onClick","Deletion","aria-label","aria-hidden","todosData","App","state","todos","task","AddingElem","bind","HandleText","this","setState","prevState","map","todo","index","findIndex","p","splice","event","target","value","console","log","length","push","alert","todoItems","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uOAuBeA,MArBf,SAAkBC,GAMd,OACI,yBAAKC,UAAU,aACX,2BACIC,KAAK,WACLC,QAASH,EAAMI,KAAKC,UACpBC,SAAU,kBAAMN,EAAMO,aAAaP,EAAMI,KAAKI,OAElD,uBAAGC,OAAkC,IAAzBT,EAAMI,KAAKC,UAZP,CACpBK,SAAU,SACVC,MAAO,UACPC,eAAgB,gBASiD,MAAOZ,EAAMI,KAAKS,MAC/E,4BAAQX,KAAK,SAASY,QAAS,kBAAId,EAAMe,SAASf,EAAMI,KAAKI,KAAKP,UAAU,QAAQe,aAAW,SAC/F,0BAAMC,cAAY,QAAlB,WCWGC,EA5BG,CACd,CACIV,GAAI,EACJK,KAAM,qBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mBACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,WACNR,WAAW,GAEf,CACIG,GAAI,EACJK,KAAM,mCACNR,WAAW,IC0DJc,E,YA5EX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,MAAOH,EACPI,KAAO,IAEX,EAAKC,WAAY,EAAKA,WAAWC,KAAhB,gBACjB,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKjB,aAAe,EAAKA,aAAaiB,KAAlB,gBACpB,EAAKT,SAAW,EAAKA,SAASS,KAAd,gBATN,E,0EAYDhB,GACTkB,KAAKC,UAAS,SAAAC,GAOV,MAAO,CACHP,MAPiBO,EAAUP,MAAMQ,KAAI,SAAAC,GAIrC,OAHIA,EAAKtB,KAAOA,IACZsB,EAAKzB,WAAayB,EAAKzB,WAEpByB,W,+BASVtB,GACL,IAAIuB,EAAQL,KAAKN,MAAMC,MAAMW,WAAU,SAAAC,GAAC,OAAIA,EAAEzB,KAAOA,KACzC,OAATuB,IACCL,KAAKN,MAAMC,MAAMa,OAAOH,EAAM,GAC9BL,KAAKC,SAAS,CAACN,MAAMK,KAAKN,MAAMC,W,iCAK7Bc,GACPT,KAAKC,SAAS,CACVL,KAAOa,EAAMC,OAAOC,QACxBC,QAAQC,IAAIb,KAAKN,MAAME,Q,mCAKvB,GAAwB,OAArBI,KAAKN,MAAME,MAAsC,KAApBI,KAAKN,MAAME,KAAY,CAEnD,IAAIQ,EAAO,CACPtB,GAAKkB,KAAKN,MAAMC,MAAMmB,OAAQ,EAC9B3B,KAAOa,KAAKN,MAAME,KAClBjB,WAAY,GAGhBqB,KAAKN,MAAMC,MAAMoB,KAAKX,GACtBJ,KAAKC,SAAS,CAACN,MAAQK,KAAKN,MAAMC,QAClCqB,MAAM,wBAEa,KAApBhB,KAAKN,MAAME,MACVoB,MAAM,gC,+BAIJ,IAAD,OACCC,EAAYjB,KAAKN,MAAMC,MAAMQ,KAAI,SAAAzB,GAAI,OAAI,kBAAC,EAAD,CAAUwC,IAAKxC,EAAKI,GAAIJ,KAAMA,EAAMG,aAAc,EAAKA,aAAcQ,SAAU,EAAKA,cACnI,OACI,yBAAKd,UAAU,aACP,oDAEA,2BAAOC,KAAK,OAAOI,SAAUoB,KAAKD,cAElC,2BAAOvB,KAAK,SAASmC,MAAM,SAASvB,QAASY,KAAKH,aACrDoB,O,GAvECE,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7c73a1ef.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction TodoItem(props) {\r\n    const completedstyles = {\r\n        ontStyle: \"italic\",\r\n        color: \"#cdcdcd\",\r\n        textDecoration: \"line-through\"\r\n    }\r\n    return (\r\n        <div className=\"todo-item\">\r\n            <input \r\n                type=\"checkbox\" \r\n                checked={props.item.completed} \r\n                onChange={() => props.handleChange(props.item.id)}\r\n            />\r\n            <p style = {props.item.completed === true? completedstyles : null}>{props.item.text}</p>\r\n            <button type=\"button\" onClick={()=>props.Deletion(props.item.id)} className=\"close\" aria-label=\"Close\">\r\n            <span aria-hidden=\"true\">&times;</span>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoItem","const todosData = [\r\n    {\r\n        id: 1,\r\n        text: \"Take out the trash\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 2,\r\n        text: \"Grocery shopping\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 3,\r\n        text: \"Clean gecko tank\",\r\n        completed: false\r\n    },\r\n    {\r\n        id: 4,\r\n        text: \"Mow lawn\",\r\n        completed: true\r\n    },\r\n    {\r\n        id: 5,\r\n        text: \"Catch up on Arrested Development\",\r\n        completed: false\r\n    }\r\n]\r\n\r\nexport default todosData","\nimport React from \"react\"\nimport TodoItem from \"./TodoItem.js\"\nimport todosData from \"./todosData.js\"\n\nclass App extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            todos: todosData,\n            task : ''\n        }\n        this.AddingElem =this.AddingElem.bind(this)\n        this.HandleText = this.HandleText.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.Deletion = this.Deletion.bind(this)\n    }\n    \n    handleChange(id) {\n        this.setState(prevState => {\n            const updatedTodos = prevState.todos.map(todo => {\n                if (todo.id === id) {\n                    todo.completed = !todo.completed\n                }\n                return todo\n            })\n            return {\n                todos: updatedTodos\n            }\n        })\n    }\n\n    //Deleting elements from current state\n    Deletion(id){\n        let index = this.state.todos.findIndex(p => p.id === id);\n        if(index!== null){\n            this.state.todos.splice(index,1)\n            this.setState({todos:this.state.todos})\n        }\n    }\n\n    //Adding new elements into current state\n    HandleText(event){\n        this.setState({\n            task : event.target.value})\n        console.log(this.state.task)\n    }\n\n    //Adding new elements into current state\n    AddingElem(){\n        if(this.state.task !==  null && this.state.task !== \"\"){\n\n            let todo = {\n                id : this.state.todos.length +1,\n                text : this.state.task,\n                completed : false\n\n            }\n            this.state.todos.push(todo)\n            this.setState({todos : this.state.todos})\n            alert(\"New Submission added\")\n        }\n        if(this.state.task === \"\"){\n            alert(\"Please enter a valid value\")\n        }\n    }\n\n    render() {\n        const todoItems = this.state.todos.map(item => <TodoItem key={item.id} item={item} handleChange={this.handleChange} Deletion={this.Deletion}/>)\n        return (\n            <div className=\"todo-list\">\n                    <label>\n                        Add new To-do item\n                    <input type=\"text\" onChange={this.HandleText}/>\n                    </label>\n                    <input type=\"submit\" value=\"Submit\" onClick={this.AddingElem} />\n                {todoItems}\n            </div>\n        )    \n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}